buildscript {
    ext.kotlin_version = "1.3.60"
    ext.tornadofx_version = "1.7.18"
    ext.junit_version = "5.1.0"
    ext.kotlin_version = '1.3.30'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            setUrl("https://plugins.gradle.org/m2/")
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.junit.platform:junit-platform-gradle-plugin:1.1.0"
        classpath 'org.openjfx:javafx-plugin:0.0.8'
    }
}

apply plugin: "kotlin"
apply plugin: "application"
apply plugin: "org.junit.platform.gradle.plugin"
apply plugin: 'org.openjfx.javafxplugin'

javafx {
    version = "12.0.1"
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "no.tornado:tornadofx:$tornadofx_version"

    compile 'org.controlsfx:controlsfx:8.40.14'
    
    //sqlite and RxJava-JDBC
    compile 'org.xerial:sqlite-jdbc:3.21.0.1'
    compile 'org.nield:rxkotlin-jdbc:0.2.5'
    compile 'org.slf4j:slf4j-simple:1.7.21'
    
    //RxKotlin and RxKotlinFX
    compile 'com.github.thomasnield:rxkotlinfx:2.2.2'
    compile 'io.reactivex.rxjava2:rxkotlin:2.2.0'

    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.2.1'

    testCompile "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:$junit_version"

    implementation 'com.google.code.gson:gson:2.8.2'

    implementation 'org.apache.poi:poi:4.1.1'
    implementation 'org.apache.poi:poi-ooxml:4.1.1'

}

mainClassName = "com.juliablack.extra.timetable.app.MyApp"

jar {
    manifest {
        attributes(
                "Class-Path": configurations.compile.collect { it.getName() }.join(" "),
                "Main-Class": mainClassName
        )
    }
    from(configurations.compile.collect { entry -> zipTree(entry) }) {
        exclude "META-INF/MANIFEST.MF"
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
}
